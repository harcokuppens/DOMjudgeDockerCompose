#!/bin/bash

# TODO: let user specify whether to seach for LONGBLOB or BLOB

set -e

# --- Script info  ---
SCRIPTNAME=$(basename "$0")

# --- Default Configuration ---

# --- Usage/help function ---
USAGE="Usage: $SCRIPTNAME [OPTIONS] DATABASE 

Get maximum (LONG)BLOB  size in a MariaDB database.

When you determine this maximum value for a specific
database, you can use it to determine the 'max_allowed_packet'
size on the mariadb client and server. 

Options:
  --user USER_NAME, -u USER_NAME
                The MariaDB user name to use when connecting to the server.
                (default: current system user's name)
  --password PASSWORD, -p PASSWORD
                The password to use when connecting to the server. 
  -b, --blob
                Get maximum BLOB size instead of maximum LONGBLOB size.              
  -H HOSTNAME, --host HOSTNAME 
                The hostname of the MariaDB server.
                If neither a container name nor a host name is provided, 
                then localhost is used as host name. 
  -C CONTAINER, --container CONTAINER
                The name of the Docker container running MariaDB 
                If neither a container name nor a host name is provided, 
                then localhost is used as host name.                            
  -h, --help    Display this help message and exit.

Arguments:
  DATABASE      The name of the database to analyze."

# --- log and error functions  ---
info() {
    echo "$(date +%Y-%m-%d\ %H:%M:%S) - $SCRIPTNAME - INFO  - $*" 1>&2
}
error() {
    echo "$(date +%Y-%m-%d\ %H:%M:%S) - $SCRIPTNAME - ERROR - $*" 1>&2
}

# --- Parse arguments ---

USERNAME=""
PASSWORD=""
HOST=""
CONTAINER=""
BLOBTYPE="longblob"
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
    case $1 in
    -h | --help)
        echo "$USAGE"
        exit
        ;;
    -u | --user)
        USERNAME="$2"
        shift 2
        ;;
    -p | --password)
        PASSWORD="$2"
        shift 2
        ;;
    -H | --host)
        HOST="$2"
        shift 2
        ;;
    -C | --container)
        CONTAINER="$2"
        shift 2
        ;;
    -b | --blob)
        BLOBTYPE="blob"
        shift 1
        ;;
    *)
        error "Unknown option: $1"
        error "$USAGE"
        exit 1
        ;;
    esac

done

# set database from first argument
DATABASE="$1"
if [[ -z "$DATABASE" ]]; then
    error "No database name provided."
    error "$USAGE"
    exit 1
fi

if [[ -n "$HOST" && -n "$CONTAINER" ]]; then
    error "Either a container name or a host name must be provided."
    error "$USAGE"
    exit 1
fi

if [[ -z "$HOST" && -z "$CONTAINER" ]]; then
    HOST="localhost"
fi

# --- main  ---

info "Determining max_allowed_packet size for mariadb server and clients as twice the largest blob size"
info "See comments in 'mariadb-backup' script where max_allowed_packet size is used."

tmpfile=$(mktemp)
info "Writing sizes of all $BLOBTYPE columns in database to $tmpfile"

# Step 1: get all (LONG)BLOB columns dynamically
COLUMNS_SQL="
SELECT table_name, column_name
FROM information_schema.columns
WHERE table_schema = '$DATABASE'
  AND data_type = '$BLOBTYPE';
"

if [[ -n "$HOST" ]]; then
    # connecting to a mariadb server on a host
    mapfile -t columns < <(
        mariadb -u root -p"$PASSWORD" -N -e "$COLUMNS_SQL" |
            awk '{print $1"."$2}'
    )
else
    # Running script on the docker host.
    mapfile -t columns < <(
        docker exec -i "$CONTAINER" /bin/bash -c \
            "mariadb -u root -p\"$PASSWORD\" -N -e \"$COLUMNS_SQL\" " |
            awk '{print $1"."$2}'
    )
fi

if [ ${#columns[@]} -eq 0 ]; then
    echo "No $BLOBTYPE columns found in database '$DATABASE'."
    exit 0
fi

info "FOUND COLUMNS with $BLOBTYPE: ${columns[@]}"
info "query per table column  the size of its $BLOBTYPE "

# Step 2: execute each column query separately and append to tmpfile

set -o pipefail
>"$tmpfile" # empty the file first
for col in "${columns[@]}"; do
    table="${col%%.*}"
    column="${col#*.}"
    info "processing ${table}.${column}"
    # do not max in sql but with awk, because awk can do it in parallel and sql cannot
    # In the next formatting string we only need the handle to escape the single quotes
    # by replacing ' by '\'' in the formatted string.
    # So the literal formatting string
    #      SELECT '%s' AS column_ref, LENGTH(`%s`) AS blob_size FROM `%s`;
    # is passed between single quotes as first argument to printf as:
    printf -v SQL_QUERY 'SELECT '\''%s'\'' AS column_ref, LENGTH(`%s`) AS blob_size FROM `%s`;' "$col" "$column" "$table"
    # To avoid issues with quoting inside the docker exec -c command
    # we use a herestring to pass the SQL_QUERY as standard input to the mariadb command.
    # Below the <<< is a "herestring" redirection operator. It's a shorthand for a heredoc that
    # takes a single variable's content and provides it as standard input.
    if [[ -n "$HOST" ]]; then
        # connecting to a mariadb server on a host
        mariadb -h "$HOST" -u "$USERNAME" -p"$PASSWORD" -N "$DATABASE" <<<"$SQL_QUERY" >>"$tmpfile"
    else
        # Running script on the docker host.
        docker exec -i "$CONTAINER" /bin/bash -c "mariadb -u '$USERNAME' -p'$PASSWORD' -N '$DATABASE'" <<<"$SQL_QUERY" >>"$tmpfile"
    fi
done

info "Sizes of all $BLOBTYPE values COLLECTED, now calculate max"

# Step 3: display results

# get the max blob size (some values may be NULL, so ignore them in awk)
MAX=$(awk 'BEGIN {max = -1} {if ($2 ~ /^[0-9]+$/ && $2 > max) max = $2} END {print max}' "$tmpfile")
info "Largest $BLOBTYPE in database: $MAX bytes (~$((MAX / 1024 / 1024)) MB)"
info "Recommended max_allowed_packet(=2*largest_$BLOBTYPE): $((MAX * 2)) bytes (~$(((MAX * 2) / 1024 / 1024)) MB)"

# output to stdout the result
echo "$MAX"

# cleanup tmpfile
rm "$tmpfile"
