#!/bin/bash

# --- Script info  ---
SCRIPTDIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
SCRIPTNAME=$(basename "$0")

# --- Default Configuration ---
MAX_PACKET_SIZE="1G"
CONTAINER="mariadb"

# --- Usage/help function ---
USAGE="Usage: $SCRIPTNAME [-h|--help] FILEPATH

DESCRIPTION
   Restore the domjudge MariaDB database from a dumpfile 

OPTIONS
  -h, --help    Display this help message and exit.

ARGUMENTS
  FILEPATH      The path where the database dump file will is located.

EXAMPLE
  First bring your containers down. 
     
     $ docker compose down

  Then start only the mariadb database container

     $ docker compose up -d mariadb

  Restore the database from a dumpfile     
  
     $ bin/restore-backup data/backups/mariadb.sql.gz
     INFO: Restoring from the dumpfile 'data/backups/mariadb.sql.gz'
     INFO: dumping mariadb database succesful

  Delete the old passwords files, 
  and let new ones generated on start of the domserver container 

     $ sudo rm  data/passwords/*   

  Start all containers 

     $ docker compose up -d
      ✔ Network caddy_reverseproxy  Created
      ✔ Container mariadb           Running
      ✔ Container domserver         Started
      ✔ Container judgehost-1       Started
      ✔ Container judgehost-0       Started

   Now you should be able to login as 'admin' user using the password
   in data/passwords/admin.pw 

   Note that if you remembered the admin password of the backup, 
   then you could skip resetting the admin password. 

"

# --- log and error functions  ---
info() {
   echo "$(date +%Y-%m-%d\ %H:%M:%S) - $SCRIPTNAME - INFO  - $*" 1>&2
}
error() {
   echo "$(date +%Y-%m-%d\ %H:%M:%S) - $SCRIPTNAME - ERROR - $*" 1>&2
}

# --- Parse arguments ---
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
   case $1 in
   -h | --help)
      echo "$USAGE"
      exit
      ;;
   *)
      error "Unknown option: $1"
      error "$USAGE"
      exit 1
      ;;
   esac
done

dumpfile="$1"

if [[ -z "$dumpfile" ]]; then
   error "Missing the dumpfile argument."
   error "$USAGE"
   exit 1
fi

if [[ -f "$dumpfile" ]]; then
   if [[ "$dumpfile" == *.sql.gz ]]; then
      info "Restoring from the dumpfile '$dumpfile'"
   else
      error "The dumpfile '$dumpfile' does NOT end with '.sql.gz'."
      exit 1
   fi

else
   error "The dumpfile '$dumpfile' does not exist."
   exit 1
fi

# --- Main ---

# Check if the mariadb container is running
if ! docker ps | grep -q "$CONTAINER"; then
   error "The 'mariadb' docker container is not running."
   exit 1
fi

# verify the integrity of the dumpfile using sha256 checksum
# Only verify if hash file exists next to the backup
if [[ -f "$dumpfile.sha256" ]]; then
   info "Verifying integrity of dumpfile '$(basename $dumpfile)' using checksum in '$(basename $dumpfile.sha256)'"
   FILE_HASH=$("$SCRIPTDIR"/backup-checksum "$dumpfile")
   VERIFY_HASH=$(cat "$dumpfile.sha256")
   if [[ "$FILE_HASH" != "$VERIFY_HASH" ]]; then
      error "The integrity check of the dumpfile '$dumpfile' failed."
      error "The checksum does not match the expected value in '$dumpfile.sha256'."
      exit 1
   else
      info "The integrity check of the dumpfile '$dumpfile' succeeded."
   fi
fi

# restore database from dumpfile using mariadb command within the docker container
# environment variables MYSQL_ROOT_PASSWORD and MYSQL_DATABASE set in docker-compose.yml
set -o pipefail
gunzip -c "$dumpfile" |
   docker exec -i "$CONTAINER" /bin/bash -c \
      '/usr/bin/mariadb --max-allowed-packet='"$MAX_PACKET_SIZE"'  --user root  -p$MYSQL_ROOT_PASSWORD $MYSQL_DATABASE'

exit_status=$?
if [[ $exit_status -ne 0 ]]; then
   error "restoring mariadb database failed"
   exit $exit_status
else
   info "dumping mariadb database succesful"
fi
