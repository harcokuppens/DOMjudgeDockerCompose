#!/bin/bash

# --- Script info  ---
SCRIPTDIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
SCRIPTNAME=$(basename "$0")

# --- Default Configuration ---
MAX_PACKET_SIZE="1G"

# --- Usage/help function ---
USAGE="Usage: $SCRIPTNAME [OPTIONS] DATABASE FILEPATH  

DESCRIPTION
   Restore a MariaDB database from a dumpfile 

OPTIONS
  --user USER_NAME, -u USER_NAME
                The MariaDB user name to use when connecting to the server.
                (default: current system user's name)
  --password PASSWORD, -p PASSWORD
                The password to use when connecting to the server. 
  -H HOSTNAME, --host HOSTNAME 
                The hostname of the MariaDB server.
                If neither a container name nor a host name is provided, 
                then localhost is used as host name. 
  -C CONTAINER, --container CONTAINER
                The name of the Docker container running MariaDB 
                If neither a container name nor a host name is provided, 
                then localhost is used as host name.    
  -h, --help    Display this help message and exit.

ARGUMENTS
  DATABASE      The name of the database to restore.
  FILEPATH      The path where the database dump file is located.


EXAMPLE 1
   Restore the database 'mydatabase' from a dumpfile 'backups/mariadb.sql.gz'   
   in the backup server host mydbserver.

     $ bin/restore-backup -u root -p HIDDEN -H mydbserver mydatabase backupfile.sql.gz
     INFO: Restoring from the dumpfile 'backupfile.sql.gz'
     INFO: restoring mydatabase database succesful

EXAMPLE 2
   Restore the database 'mydatabase' from a dumpfile 'backups/mariadb.sql.gz'   
   in the backup Docker container mydbservice.

     $ bin/restore-backup -u root -p HIDDEN -H mydbservice mydatabase backupfile.sql.gz
     INFO: Restoring from the dumpfile 'backupfile.sql.gz'
     INFO: restoring mydatabase database succesful

   Note: when restoring the database in a docker container,
   then the container must be running. But the other containers
   using the database could best be temporary stopped. 

"

# --- log and error functions  ---
info() {
   echo "$(date +%Y-%m-%d\ %H:%M:%S) - $SCRIPTNAME - INFO  - $*" 1>&2
}
error() {
   echo "$(date +%Y-%m-%d\ %H:%M:%S) - $SCRIPTNAME - ERROR - $*" 1>&2
}

# --- Parse arguments ---
USERNAME=""
PASSWORD=""
HOST=""
CONTAINER=""
EXCLUDE_TABLES=""
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
   case $1 in
   -h | --help)
      echo "$USAGE"
      exit
      ;;
   -u | --user)
      USERNAME="$2"
      shift 2
      ;;
   -p | --password)
      PASSWORD="$2"
      shift 2
      ;;
   -H | --host)
      HOST="$2"
      shift 2
      ;;
   -C | --container)
      CONTAINER="$2"
      shift 2
      ;;
   -e | --exclude-tables-in-checksum)
      EXCLUDE_TABLES="$2"
      shift 2
      ;;
   *)
      error "Unknown option: $1"
      error "$USAGE"
      exit 1
      ;;
   esac

done

dumpfile="$2"

if [[ -z "$dumpfile" ]]; then
   error "Missing the dumpfile argument."
   error "$USAGE"
   exit 1
fi

DATABASE="$1"

if [[ -z "$DATABASE" ]]; then
   error "Missing the DATABASE argument."
   error "$USAGE"
   exit 1
fi

if [[ -n "$3" ]]; then
   error "Too many arguments."
   error "$USAGE"
   exit 1
fi

if [[ -n "$HOST" && -n "$CONTAINER" ]]; then
   error "Either a container name or a host name must be provided."
   error "$USAGE"
   exit 1
fi

if [[ -z "$HOST" && -z "$CONTAINER" ]]; then
   HOST="localhost"
fi

if [[ -f "$dumpfile" ]]; then
   if [[ "$dumpfile" == *.sql.gz ]]; then
      info "Restoring from the dumpfile '$dumpfile'"
   else
      error "The dumpfile '$(basename $dumpfile)' does NOT end with '.sql.gz'."
      exit 1
   fi

else
   error "The dumpfile '$dumpfile' does not exist."
   exit 1
fi

# --- Main ---

# verify the integrity of the dumpfile using sha256 checksum
# Only verify if hash file exists next to the backup
if [[ -f "$dumpfile.sha256" ]]; then
   info "Verifying integrity of dumpfile '$(basename $dumpfile)' using checksum in '$(basename $dumpfile.sha256)'"
   FILE_HASH=$("$SCRIPTDIR"/mariadb-backup-checksum -e "$EXCLUDE_TABLES" "$dumpfile")
   VERIFY_HASH=$(cat "$dumpfile.sha256")
   if [[ "$FILE_HASH" != "$VERIFY_HASH" ]]; then
      error "The integrity check of the dumpfile '$(basename $dumpfile)' failed."
      error "The checksum does not match the expected value in '$(basename $dumpfile.sha256)'."
      error "The dumpfile '$(basename $dumpfile)' may be corrupted. Not restoring the database."
      error "Or maybe you forget to exclude some tables for the checksum calculation. You can add them using the -e option."
      exit 1
   else
      info "The integrity check of the dumpfile '$(basename $dumpfile)' succeeded."
   fi
fi

# restore database from dumpfile using mariadb command within the docker container
set -o pipefail
if [[ -n "$HOST" ]]; then
   # connecting to a mariadb server on a host
   info "running: gunzip -c $dumpfile | /usr/bin/mariadb --host=$HOST --max-allowed-packet=$MAX_PACKET_SIZE --user=$USERNAME --password=HIDDEN $DATABASE"
   gunzip -c "$dumpfile" | /usr/bin/mariadb --host="$HOST" --max-allowed-packet="$MAX_PACKET_SIZE" --user="$USERNAME" --password="$PASSWORD" "$DATABASE"
   exit_status=$?
else
   # Running backup-restore script on the docker host.
   # Check if the container is running
   if ! docker ps | grep -q "$CONTAINER"; then
      error "The '$CONTAINER' docker container is not running."
      exit 1
   fi

   info "running: gunzip -c $dumpfile | docker exec -i "$CONTAINER" /bin/bash -c '/usr/bin/mariadb --host=$HOST --max-allowed-packet=$MAX_PACKET_SIZE --user=$USERNAME --password=HIDDEN $DATABASE'"
   gunzip -c "$dumpfile" |
      docker exec -i "$CONTAINER" /bin/bash -c \
         '/usr/bin/mariadb --max-allowed-packet='"$MAX_PACKET_SIZE"'  --user '"$USERNAME"'  -p'"$PASSWORD"' '"$DATABASE"
   exit_status=$?
fi

if [[ $exit_status -ne 0 ]]; then
   error "restoring '$DATABASE' database failed. Mariadb exited with status $exit_status"
   exit $exit_status
else
   info "restoring mariadb database '$DATABASE' succesful"
fi
